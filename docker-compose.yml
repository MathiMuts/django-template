# docker-compose.yml

services:
  db:
    image: postgres:15-alpine
    container_name: ${NAME}_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ${NAME}_redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build: .
    container_name: ${NAME}_django_app
    command: >
      sh -c "gunicorn project.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --worker-class gthread --timeout 660 --log-level info --access-logfile - --error-logfile -"
    volumes:
      - ./:/app
      - /app/theme/static_src/node_modules
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - RUNNING_IN_DOCKER=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    
  nginx:
    image: nginx:1.25-alpine
    container_name: ${NAME}_nginx
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/vol/static:ro
      - media_volume:/vol/media:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - web
    restart: unless-stopped
    
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: